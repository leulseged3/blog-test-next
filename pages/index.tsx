import Head from 'next/head'
import { GetServerSideProps } from 'next';
import { Avatar, Col, Divider, List, Row } from 'antd';
import React, { useEffect, useMemo, useState } from 'react';
import { Blog } from '@/types/blog';
import { useRouter } from 'next/router';
import { Input } from 'antd';
import {  DeleteOutlined, EditOutlined} from '@ant-design/icons';

const { Search } = Input;

const PAGE_SIZE= 25

export const getServerSideProps: GetServerSideProps = async ({
  query
}) => {
 const res = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${query.page}&_limit=${PAGE_SIZE}`);
 const data = await res.json();
 const total = await res.headers.get('X-Total-Count')

 return {
   props: { 
    data,
    total  
  },
 };
};

type HomeProps = {
  data: Array<Blog>,
  total: number,
}

const Home: React.FC<HomeProps> = props => {
  const { data, total } = props
  const [currentPage, setCurrentPage] = useState(1);
  const [searchText, setSearchText] = useState("");

  const pageSize = 25;

  const blogs = useMemo(() => data.filter(item => {
    return item.title.toLowerCase().includes(searchText.toLowerCase()) 
          || item.body.toLowerCase().includes(searchText.toLowerCase())
  }), [searchText, data])
  
  useEffect(() =>  {
    router.push({
      pathname: "/",
      query: {
        page: currentPage
      }
    })
  }, [currentPage]);

  const onPageChange = (page: number) => {
    setCurrentPage(page);
  };

  const onAvatarPress = (id: number) => {
    router.push({
      pathname: "/authors/detail",
      query: {
        id: id
      }
    })
  }

  const onEditPress = (id: number) => {
    router.push({
      pathname: "/blogs/edit",
      query: {
        id: id
      }
    })
  }

  const router = useRouter()

  return (
    <div style={{ marginTop: "25px"}}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Col span={12} offset={6}>
        <Row>
          <Col span={24}>
            <Search 
              placeholder="input search text" 
              onSearch={setSearchText} 
              enterButton
              onChange={e => setSearchText(e.target.value)}
            />
          </Col>
        </Row>
      </Col>
     
      <Divider />

      <Col span={12} offset={6}>
        <List
          itemLayout="vertical"
          size="large"
          pagination={{
            onChange: onPageChange,
            pageSize: pageSize,
            total: total,
            showSizeChanger: false
          }}
          dataSource={blogs}
          renderItem={(item) => (
            <List.Item
              key={item.title}
              actions={[
                <EditOutlined title='Edit' onClick={() => onEditPress(item.id)}/>,
                <DeleteOutlined style={{ color: "red"}}/>,
              ]}
            >
              <List.Item.Meta
                avatar={<Avatar onClick={() => onAvatarPress(item.userId)}>{item.userId}</Avatar>}
                description={item.title}
              />
              {item.body}
            </List.Item>
          )}
          style={{paddingTop: "20px", paddingBottom: "40px"}}
        />
      </Col>      
    </div>
  )
}

export default Home